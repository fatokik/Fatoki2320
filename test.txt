Logan Alcaraz, Kenny Fatoki, Thadeus Menesus, Akhil Mulakala CS 4320 Exercise 4.2

Augur As a System

As a technical system: 
Augur as a technical system is an open-source software that collects trace data for a group of repositories. It puts this data through its data model and provides useful metrics on the system which provides a visual idea on how the components of the system are operating, executing and performing. 
As a sociotechnical system for evaluating open source software project health and sustainability:
Augur as a sociotechnical system achieves both technical excellence and quality for users. A good example of a sociotechnical theory can be seen through the idea of Burstiness. Burstiness not only shows technical excellence by checking for intense activity and pattern of activity, but also shows quality to the workplace by allowing the users to see if their repository has potential stability and showing how a typical cycle of updates would occur. Augur can also take raw data from your repository and generate a summary that will produce a visual schema. This allows users to actually have a visual representation of their repository to see any issues. 
As a sociotechnical system for:
— Wholes Rather than parts:
Augur takes data from various repositories and combines and synthesizes it into a whole by providing metrics to give meaning and context to the larger stories the data tells
— Interconnections / Relationships:
Augur identifies relationships and interconnectedness between the repositories and the data it gathers by synthesizing it into metrics that combine the various sources and describe it as a whole.
— Non-linear relationships:
Augur deals with nonlinear relationships because the data the metrics display may not be in a linear trend. The health and sustainability metrics may fluctuate in an unpatterned nonlinear way and Augur must be able to take that nonlinear data and still define metrics to give important context to the communities health and sustainability.
— Stock and flow relationships:
Augur is involved with stock and flow relationships because by analyzing data from the repositories, as the communities for free and open software evolve, so will the data and the levels of health and sustainability of the software
— Dynamic Behavior:
The interconnections of different repositories and software communities, as well as nonlinear relationships of the data combined with the fluctuating stocks and flows  and feedback loops create the dynamic behavior that Augur needs to handle and give meaningful context to.
— Feedback loops:
Feedback loops in Augur include the flow of data from repositories, the Github API, the main application augur and the database. The system ensures that each individual system maintains its interconnections to create such feedback loops
— Acknowledging that systems are important:
Augur collects trace data from a group of repositories and uses that to make a data model. If it wasn’t for systems and the system that augur uses then it wouldn’t be possible to have the data model which is the end result of this project

— System as the cause of its behavior:
A system is defined as “a regularly interacting or interdependent group of items forming a unified whole”. Augur is a system and if it wasn’t for all the parts that go into this project then it wouldn’t be able to function. If it wasn’t for the data then there would be nothing to transform.


— System structure generates behavior:
The structure of the Augur software system functions so that data is allowed to flow through the various components of the system. The database holds information about the repos, the Augur application and the workers to collect repo data, and Augur’s frontend for visualization of the data. 
— Delays:
There could be multiple delays due to the way the Augur system is structured. If they aren’t able to collect enough data then there would be a delay as to when they could get the data transformed. There could also be a delay in transforming the data due to there being an unknown format with the data or just something entirely different than what was expected ends up being sent to transform

